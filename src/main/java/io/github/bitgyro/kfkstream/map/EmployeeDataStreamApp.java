/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.github.bitgyro.kfkstream.map;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.KeyValue;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.Produced;

import java.util.Properties;

public class EmployeeDataStreamApp {

    public static void main(String[] args) {

        final String INPUT_TOPIC = "employee_data_input";
        final String OUTPUT_TOPIC = "employee_data_output";
        final String OUTPUT_TOPIC_CASUAL = "casual_employee_data_output";
        final String OUTPUT_TOPIC_CASUAL_ABOVE_500_SALARY = "casual_employee_data_output_with_above_500_salary";
        final String OUTPUT_TOPIC_CASUAL_BELOW_500_SALARY = "casual_employee_data_output_with_below_500_salary";

        Properties config = new Properties();
        config.put(StreamsConfig.APPLICATION_ID_CONFIG, "employee_data_stream_app");
        config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        config.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
        config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());
        // Kafka Console custom deserialser does not work.
        // https://issues.apache.org/jira/browse/KAFKA-2526
        config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());

        StreamsBuilder streamsBuilder = new StreamsBuilder();
        KStream<String,String> employeeDataStream = streamsBuilder.stream(INPUT_TOPIC);

        KStream<String,Long>[] branches = employeeDataStream.mapValues(orgSalary -> Long.valueOf(orgSalary)*2)
                .through(OUTPUT_TOPIC, Produced.with(Serdes.String(),Serdes.Long()))
                .filter((key, value) -> value < 1000)
                .map((key, value) -> new KeyValue<>(key.concat("-").concat("CASUAL"),value))
                .through(OUTPUT_TOPIC_CASUAL,Produced.with(Serdes.String(),Serdes.Long()))
                .branch((key,value) -> value >= 500 ,
                        (key,value) -> value < 500);

        branches[0].to(OUTPUT_TOPIC_CASUAL_ABOVE_500_SALARY);
        branches[1].to(OUTPUT_TOPIC_CASUAL_BELOW_500_SALARY);

        KafkaStreams kafkaStreams = new KafkaStreams(streamsBuilder.build(), config);
        kafkaStreams.start();

        // Closing application gracefully
        Runtime.getRuntime().addShutdownHook(new Thread(kafkaStreams::close));
    }
}
